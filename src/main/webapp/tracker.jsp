<%@ page contentType="text/html;charset=UTF-8" %>
<%@ taglib uri="jakarta.tags.core" prefix="c" %>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–æ–∏ –∑–∞–¥–∞—á–∏</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        h2 {
            font-size: 24px;
            margin: 0;
        }
        .board {
            display: flex;
            gap: 20px;
        }
        .column {
            background-color: white;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            flex: 1;
            position: relative;
            min-height: 200px;
        }
        .column-title {
            display: inline-block;
            padding: 5px;
            font-weight: bold;
            margin-bottom: 5px;
            border-radius: 8px;
        }
        .open .column-title {
            background-color: rgba(255, 173, 173, 0.5);
        }
        .in-progress .column-title {
            background-color: rgba(173, 173, 255, 0.5);
        }
        .done .column-title {
            background-color: rgba(173, 255, 173, 0.5);
        }
        .task-counter {
            display: inline-block;
            padding: 5px;
            margin-left: 10px;
            border-radius: 8px;
            background-color: rgba(200, 200, 200, 0.5);
            font-weight: bold;
        }
        .add-task-icon {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 15px;
            cursor: pointer;
            color: #888;
        }
        .task {
            background-color: #f9f9f9;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            margin-bottom: 10px;
            position: relative;
        }
        .edit-button {
            background: none; /* –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω */
            border: none; /* –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É */
            cursor: pointer; /* –ö—É—Ä—Å–æ—Ä –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
            color: #888; /* –¶–≤–µ—Ç –∏–∫–æ–Ω–∫–∏ */
            font-size: 16px; /* –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ */
            padding: 0; /* –£–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
            margin: 0; /* –£–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
        }
        .delete-button {
            color: red; /* –¶–≤–µ—Ç –∏–∫–æ–Ω–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è */
            background: none; /* –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω */
            border: none; /* –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É */
            cursor: pointer; /* –ö—É—Ä—Å–æ—Ä –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
            padding: 0; /* –£–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
            margin: 0; /* –£–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
        }
        .assigned {
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 5px;
            color: #555;
        }
        .labels {
            display: flex;
            gap: 5px;
            margin-bottom: 10px;
        }
        .label {
            font-size: 12px;
            padding: 4px 8px;
            border-radius: 4px;
            color: white;
            background-color: rgba(255, 165, 0, 0.7);
        }
        .description {
            margin-top: 10px;
            padding: 10px; /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –≤–Ω—É—Ç—Ä–∏ */
            background-color: #f7f7f7; /* –°–≤–µ—Ç–ª—ã–π —Å–µ—Ä—ã–π —Ñ–æ–Ω */
            border-radius: 5px; /* –ó–∞–∫—Ä—É–≥–ª—è–µ–º —É–≥–ª—ã */
            border: 1px solid #ddd; /* –¢–æ–Ω–∫–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* –¢–µ–Ω—å –¥–ª—è –æ–±—ä–µ–º–∞ */
            font-style: italic; /* –ö—É—Ä—Å–∏–≤ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è */
            color: #555; /* –î–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ */
        }
        .comments {
            margin-top: 10px;
            padding: 10px; /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –≤–Ω—É—Ç—Ä–∏ */
            background-color: #e6f7ff; /* –°–≤–µ—Ç–ª—ã–π –≥–æ–ª—É–±–æ–π —Ñ–æ–Ω */
            border-radius: 5px; /* –ó–∞–∫—Ä—É–≥–ª—è–µ–º —É–≥–ª—ã */
            border: 1px solid #b3e0ff; /* –õ–µ–≥–∫–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* –¢–µ–Ω—å –¥–ª—è –æ–±—ä–µ–º–∞ */
        }
        .comment {
            padding: 5px; /* –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */
            border-bottom: 1px solid #b3d1ff; /* –õ–µ–≥–∫–∞—è –ª–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è */
            color: #333; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */
        }
        .comment-text {
            margin-left: 10px; /* –û—Ç—Å—Ç—É–ø –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */
        }
        .comment:last-child {
            border-bottom: none; /* –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */
        }
        .task-form {
            display: none; /* Initially hidden */
            margin-bottom: 20px;
            background-color: white;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .task-form input {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .add-task-button {
            padding: 10px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        .add-task-button:hover {
            background-color: #218838;
        }
        .task-buttons {
            position: absolute;
            top: 0;
            right: 0;
            display: flex;
            align-items: baseline; /* –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ */
            gap: 15px; /* –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏ */
            padding: 5px; /* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
            background-color: #f9f9f9; /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ */
            border-radius: 5px; /* –ó–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ */
            min-width: 70px;
            justify-content: flex-end;
        }
    </style>
</head>
<body>
<header>
    <h2>–ú–æ–∏ –∑–∞–¥–∞—á–∏</h2>
</header>

<div class="task-form" id="taskForm">
    <input type="text" id="taskTitle" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" required>
    <input type="text" id="taskAssigned" placeholder="–ö–æ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∞" required>
    <button class="add-task-button" onclick="addTask()">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</button>
    <button class="add-task-button" onclick="toggleTaskForm()">–û—Ç–º–µ–Ω–∏—Ç—å</button>
</div>

<div class="board">
    <div class="column open" id="open">
    <c:set var = "counterOpen" value="${open.size()}"/>
        <div class="column-title">Open</div>
        <span class="task-counter" id="open-counter">${counterOpen}</span>
        <span class="add-task-icon" onclick="toggleTaskForm()">‚ûï</span>
        <c:forEach var="task" items="${open}">
            <div class="task" id="task${task.id}">
                <div style="position: relative;">
                    <div class="task-buttons">
                        <button class="delete-button" onclick="deleteTask(${task.id})">üóëÔ∏è</button>
                        <button class="edit-button" onclick="editTask(this)">‚ãÆ</button>
                    </div>
                    <div class="assigned">${task.assignee.username}</div>
                    <h4 class="task-title">${task.title}</h4>
                    <div class="labels">
                        <c:forEach var="label" items="${task.labels}">
                            <span class="label" style="background-color: ${label.color}">${label.label}</span>
                        </c:forEach>
                    </div>
                    <c:if test="${not empty task.description}">
                        <div class="description">${task.description}</div>
                    </c:if>
                    <c:if test="${not empty task.comments}">
                    <div class="comments">
                        <c:forEach var="comment" items="${task.comments}">
                            <div class="comment">
                                <span class="comment-text">${comment.comment}</span>
                            </div>
                        </c:forEach>
                    </div>
                    </c:if>
                </div>
            </div>
        </c:forEach>
    </div>
    <div class="column in-progress" id="in-progress">
    <c:set var = "counterInProgress" value="${in_progress.size()}"/>
        <div class="column-title">In Progress</div>
        <span class="task-counter" id="in-progress-counter">${counterInProgress}</span>
        <c:forEach var="task" items="${in_progress}">
                <div class="task" id="task${task.id}">
                    <div style="position: relative;">
                        <div class="task-buttons">
                            <button class="delete-button" onclick="deleteTask(${task.id})">üóëÔ∏è</button>
                            <button class="edit-button" onclick="editTask(this)">‚ãÆ</button>
                        </div>
                        <div class="assigned">${task.assignee.username}</div>
                        <h4 class="task-title">${task.title}</h4>
                        <div class="labels">
                            <c:forEach var="label" items="${task.labels}">
                                <span class="label" style="background-color: ${label.color}">${label.label}</span>
                            </c:forEach>
                        </div>
                        <c:if test="${not empty task.description}">
                            <div class="description">${task.description}</div>
                        </c:if>
                        <c:if test="${not empty task.comments}">
                            <div class="comments">
                                <c:forEach var="comment" items="${task.comments}">
                                    <div class="comment">
                                        <span class="comment-text">${comment.comment}</span>
                                    </div>
                                </c:forEach>
                            </div>
                        </c:if>
                    </div>
                </div>
        </c:forEach>
    </div>
    <div class="column done" id="done">
        <c:set var = "counterDone" value="${done.size()}"/>
        <div class="column-title">Done</div>
        <span class="task-counter" id="done-counter">${counterDone}</span>
        <c:forEach var="task" items="${done}">
                <div class="task" id="task${task.id}">
                    <div style="position: relative;">
                        <div class="task-buttons">
                            <button class="delete-button" onclick="deleteTask(${task.id})">üóëÔ∏è</button>
                            <button class="edit-button" onclick="editTask(this)">‚ãÆ</button>
                        </div>
                        <div class="assigned">${task.assignee.username}</div>
                        <h4 class="task-title">${task.title}</h4>
                        <div class="labels">
                            <c:forEach var="label" items="${task.labels}">
                                <span class="label" style="background-color: ${label.color}">${label.label}</span>
                            </c:forEach>
                        </div>
                        <c:if test="${not empty task.description}">
                            <div class="description">${task.description}</div>
                        </c:if>
                        <c:if test="${not empty task.comments}">
                            <div class="comments">
                                <c:forEach var="comment" items="${task.comments}">
                                    <div class="comment">
                                        <span class="comment-text">${comment.comment}</span>
                                    </div>
                                </c:forEach>
                            </div>
                        </c:if>
                    </div>
                </div>
        </c:forEach>
    </div>
</div>

<script>
    function toggleTaskForm() {
        const form = document.getElementById('taskForm');
        form.style.display = form.style.display === 'none' ? 'block' : 'none';
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã
        if (form.style.display === 'block') {
            document.getElementById('taskTitle').focus();
        }
    }

    function editTask(task) {}

    function addTask() {
        const title = document.getElementById('taskTitle').value.trim();
        const assigned = document.getElementById('taskAssigned').value.trim();

        if (title === "" || assigned === "") {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
            return;
        }

        const taskColumn = document.getElementById('open');
        const taskDiv = document.createElement('div');
        taskDiv.className = 'task';
        taskDiv.innerHTML = `
            <div style="position: relative;">
                <div class="task-buttons">
                        <button class="delete-button" onclick="deleteTask(${task.id})">üóëÔ∏è</button>
                        <button class="edit-button" onclick="editTask(this)">‚ãÆ</button>
                </div>
                <div class="assigned">–ù–∞–∑–Ω–∞—á–µ–Ω–æ: ${assigned}</div>
                <p>${title}</p>
                <div class="labels">
                    <span class="label">–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞</span>
                </div>
                <div class="description">–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.</div>
                <div class="comments">
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.</p>
                </div>
            </div>
        `;

        taskColumn.appendChild(taskDiv);
        updateTaskCounter('open');
        document.getElementById('taskTitle').value = '';
        document.getElementById('taskAssigned').value = '';
        toggleTaskForm();
    }

    function updateTaskCounter(columnId) {
        const column = document.getElementById(columnId);
        const tasks = column.getElementsByClassName('task');
        const counterSpan = document.getElementById(columnId + '-counter');
        counterSpan.innerText = tasks.length;
    }

    function deleteTask(taskId) {
        console.log("–£–¥–∞–ª—è–µ–º –ø–æ URL:", `api/task/`+taskId);
        const url = `task/`+taskId;
        console.log("URL –∑–∞–ø—Ä–æ—Å–∞:", url);
        fetch(url, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        })
            .then(response => {
                if (response.ok) {
                    // –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏
                    document.getElementById(`task`+taskId).remove();
                } else {
                    console.error('–û—Ç–≤–µ—Ç: ', response)
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', response.ok);
                }
            })
            .catch(error => console.error('–û—à–∏–±–∫–∞: ', error));
    }
</script>

</body>
</html>
